// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteEvolution.DAL.DataContext;

#nullable disable

namespace NoteEvolution.DAL.Migrations
{
    [DbContext(typeof(NoteEvolutionContext))]
    [Migration("20220626161246_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("NoteEvolution.DAL.Models.ContentSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Chapter")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RelatedNoteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RelatedTextUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RelatedNoteId");

                    b.HasIndex("RelatedTextUnitId");

                    b.ToTable("ContentSources");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderNr")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelatedTextUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RelatedTextUnitId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.TextUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RelatedDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SuccessorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RelatedDocumentId");

                    b.HasIndex("SuccessorId");

                    b.ToTable("TextUnits");
                });

            modelBuilder.Entity("NoteNote", b =>
                {
                    b.Property<int>("DerivedNotesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceNotesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DerivedNotesId", "SourceNotesId");

                    b.HasIndex("SourceNotesId");

                    b.ToTable("NoteNote");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.ContentSource", b =>
                {
                    b.HasOne("NoteEvolution.DAL.Models.Note", "RelatedNote")
                        .WithMany("RelatedSources")
                        .HasForeignKey("RelatedNoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoteEvolution.DAL.Models.TextUnit", "RelatedTextUnit")
                        .WithMany("RelatedSources")
                        .HasForeignKey("RelatedTextUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RelatedNote");

                    b.Navigation("RelatedTextUnit");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.Note", b =>
                {
                    b.HasOne("NoteEvolution.DAL.Models.TextUnit", "RelatedTextUnit")
                        .WithMany("NoteList")
                        .HasForeignKey("RelatedTextUnitId");

                    b.Navigation("RelatedTextUnit");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.TextUnit", b =>
                {
                    b.HasOne("NoteEvolution.DAL.Models.TextUnit", "Parent")
                        .WithMany("TextUnitChildList")
                        .HasForeignKey("ParentId");

                    b.HasOne("NoteEvolution.DAL.Models.Document", "RelatedDocument")
                        .WithMany("TextUnitList")
                        .HasForeignKey("RelatedDocumentId");

                    b.HasOne("NoteEvolution.DAL.Models.TextUnit", "Successor")
                        .WithMany()
                        .HasForeignKey("SuccessorId");

                    b.Navigation("Parent");

                    b.Navigation("RelatedDocument");

                    b.Navigation("Successor");
                });

            modelBuilder.Entity("NoteNote", b =>
                {
                    b.HasOne("NoteEvolution.DAL.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("DerivedNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteEvolution.DAL.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("SourceNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.Document", b =>
                {
                    b.Navigation("TextUnitList");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.Note", b =>
                {
                    b.Navigation("RelatedSources");
                });

            modelBuilder.Entity("NoteEvolution.DAL.Models.TextUnit", b =>
                {
                    b.Navigation("NoteList");

                    b.Navigation("RelatedSources");

                    b.Navigation("TextUnitChildList");
                });
#pragma warning restore 612, 618
        }
    }
}
